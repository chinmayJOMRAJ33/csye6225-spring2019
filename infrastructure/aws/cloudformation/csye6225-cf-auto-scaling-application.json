{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Cloud Formation Template - CSYE6225 - Creating EC2 instance , Security Groups and Ingress Rules",
    "Parameters": {
        "EC2Name": {
            "Type": "String"
        },
        "SubnetId1": {
            "Type": "String"
        },
        "SubnetId2": {
            "Type": "String"
        },
        "SubnetId3": {
            "Type": "String"
        },
        "VpcId": {
            "Type": "String"
        },
        "AMI": {
            "Type": "String"
        },
        "S3Bucket": {
            "Default": "",
            "Type": "String"
        },
        "S3CodeBucket": {
            "Default": "",
            "Type": "String"
        },
        "RoleArn": {
            "Default": "",
            "Type": "String"
        },
        "keyName": {
            "Default": "ctkey",
            "Type": "String"
        },
        "SSLCertificate":{
            "Default": "12345",
            "Description": "Hosted Zone ID",
            "Type": "String"
           },
        "DBName": {
            "Default": "csye6225",
            "Description": "This is my database name",
            "Type": "String"
        },
        "DBUsername": {
            "Default": "csye6225master",
            "Description": "The database admin account username",
            "Type": "String",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*"
        },
        "DBPassword": {
            "Default": "csye6225password",
            "Description": "The database admin account password",
            "Type": "String",
            "AllowedPattern": "[a-zA-Z0-9]*"
        },
        "TagKey": {
            "Type": "String",
            "Default": "csye6225-EC2-Key"
        },
        "TagValue": {
            "Type": "String",
            "Default": "csye6225-EC2"
        },
	"mySNSTopicName": {
            "Default": "reset_password",
            "Description": "SNS Topic name",
            "Type": "String"
        },
        "Domain": {
            "Default": "csye6225-spring2019-joshichai.me",
            "Description": "from email id",
            "Type": "String"
        },
        "IPtoBlock1": {
            
            "Description": "IPAddress to be blocked",
            "Default" :  "192.0.2.44/32", 
            "Type": "String"
        },
        
        
         "IPtoBlock2": {
            
            "Description": "IPAddress to be blocked",
            "Default" :  "192.0.2.44/32",
            "Type": "String"
}
    },
    "Resources": {
        "MyLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "LaunchConfigurationName":"asg_launch_config",
                "InstanceType": "t2.micro",
                "ImageId": {
                    "Ref": "AMI"
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": "20",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "EC2ServiceRoleInstanceProfile"
                },
                "SecurityGroups": [
                    {
                        "Ref": "WebServerSecurityGroup"
                    }
                ],
                "KeyName": {
                    "Ref": "keyName"
                },
                "AssociatePublicIpAddress" : true,
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash -xe ",
                                "cd /opt/tomcat",
                                "sudo chgrp -R tomcat /opt/tomcat",
                                "sudo chmod -R g+r conf",
                                "sudo chmod -R g+x conf",
                                "sudo chown -R tomcat webapps/ work/ temp/ logs/",
                                "cd /usr/lib/systemd/system",
                                "touch tomcat.service",
                                "echo '[Unit]' > tomcat.service",
                                "echo 'Description=Apache Tomcat Web Application Container' >> tomcat.service",
                                "echo 'After=syslog.target network.target' >> tomcat.service",
                                "echo '[Service]' >> tomcat.service",
                                "echo 'Type=forking' >> tomcat.service",
                                "echo 'Environment=JAVA_HOME=/usr/lib/jvm/jre' >> tomcat.service",
                                "echo 'Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid' >> tomcat.service",
                                "echo 'Environment=CATALINA_HOME=/opt/tomcat' >> tomcat.service",
                                "echo 'Environment=CATALINA_BASE=/opt/tomcat' >> tomcat.service",
                                "echo 'Environment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"' >> tomcat.service",
                                "echo 'Environment=\"JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom -Djava.net.preferIPv4Stack=true -Djava.net.preferIPv4Addresses=true\"' >> tomcat.service",
                                "echo 'ExecStart=/opt/tomcat/bin/startup.sh' >> tomcat.service",
                                "echo 'ExecStop=/bin/kill -15 $MAINPID' >> tomcat.service",
                                "echo 'User=tomcat' >> tomcat.service",
                                "echo 'Group=tomcat' >> tomcat.service",
                                "echo 'UMask=0007' >> tomcat.service",
                                "echo 'RestartSec=10' >> tomcat.service",
                                "echo 'Restart=always' >> tomcat.service",
                                "echo '[Install]' >> tomcat.service",
                                "echo 'WantedBy=multi-user.target' >> tomcat.service",
                                "sudo chmod -R 777 /opt/tomcat",
                                "echo '#!/bin/sh' >> /opt/tomcat/bin/setenv.sh",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "echo 'JAVA_OPTS=\"${JAVA_OPTS} -Durl=jdbc:mysql://",
                                            {
                                                "Fn::GetAtt": [
                                                    "MyRDSDB",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            ":3306/csye6225\"'>> /opt/tomcat/bin/setenv.sh \n"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -Dspring.profiles.active=dev\\\"\" >> /opt/tomcat/bin/setenv.sh "
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -DendpointUrl=https://s3.us-east-1.amazonaws.com\\\"\" >> /opt/tomcat/bin/setenv.sh "
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -Dfolder=centos\\\"\" >> /opt/tomcat/bin/setenv.sh "
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -Dusername=",
                                            {
                                                "Ref": "DBUsername"
                                            },
                                            "\\\"\" >> /opt/tomcat/bin/setenv.sh "
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -Dpassword=",
                                            {
                                                "Ref": "DBPassword"
                                            },
                                            "\\\"\" >> /opt/tomcat/bin/setenv.sh "
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -DbucketName=",
                                            {
                                                "Ref": "S3Bucket"
                                            },
                                            "\\\"\" >> /opt/tomcat/bin/setenv.sh "
                                        ]
                                    ]
                                },
				{
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -DsnsName=",
                                            {
                                                "Ref": "mySNSTopicName"
                                            },
                                            "\\\"\" >> /opt/tomcat/bin/setenv.sh "
                                        ]
                                    ]
                                },
                                "chmod +x /opt/tomcat/bin/setenv.sh",
                                "systemctl daemon-reload",
                                "systemctl enable tomcat.service",
                                "systemctl start tomcat.service",
                                "sudo chmod -R 777 /opt/aws",
                                "sudo chmod -R 777 /opt/codedeploy-agent"
                            ]
                        ]
                    }
                }
            },
            "DependsOn": [
                "EC2ServiceRoleInstanceProfile",
                "MySNS"
            ]
        },
        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Access to ports 22, 80 & 443",
                "GroupName": "LoadBalancerSecurityGroup",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8080",
                        "ToPort": "8080",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "WebServerSecurityGroup":{
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties":{
                "GroupDescription":"Creating Security group with ingress rules for webapp",
 		        "VpcId":{"Ref": "VpcId"},
		        "GroupName": "csye6225-bk",
                "SecurityGroupIngress":[
                
                    {
                        "SourceSecurityGroupId":{
                            "Ref":"LoadBalancerSecurityGroup"
                         },
                        "IpProtocol":"tcp",
                        "FromPort":"8080",
                        "ToPort":"8080"
                    }
                ],
		        "Tags" :[{"Key":"Name","Value":"csye6225-bk"}]
            }
        },



        "ApplicationLoadBalancer":{
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties" : {
                "Name":"ApplicationLoadBalancer",
                "Subnets":[{"Ref": "SubnetId2"},{"Ref": "SubnetId3"}],
                "Scheme":"internet-facing",
                "Type":"application",
                "SecurityGroups":  [{"Ref":"LoadBalancerSecurityGroup"}],
                "IpAddressType": "ipv4"            
            }
        },

        "MyWebACLAssociation": {
        
            "Type": "AWS::WAFRegional::WebACLAssociation",
            "DependsOn":["ApplicationLoadBalancer","MyWebACL"],
            "Properties": {
                "ResourceArn": { "Ref": "ApplicationLoadBalancer" },
                "WebACLId": { "Ref": "MyWebACL" }
    }
    },
        "ALBTargetGroup":{
            "Type":"AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties":{
                "Name":"ALBTargetGroup",
                "Port":8080,
                "HealthCheckPort":8080,
                "Protocol":"HTTP",
				"Matcher": {
                "HttpCode" : "200,302"
				},
                "HealthCheckIntervalSeconds" : 60,
                "UnhealthyThresholdCount" : 5,
                "HealthyThresholdCount" : 3,
                "HealthCheckPath" : "/assignment1-0.0.1-SNAPSHOT",
                "HealthCheckTimeoutSeconds" : 5,
                "TargetType":"instance",
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "ALBListener":{
            "Type":"AWS::ElasticLoadBalancingV2::Listener",
            "Properties":{
                "DefaultActions":[{
                    "Type":"forward",
                    "TargetGroupArn":{"Ref":"ALBTargetGroup"}
                }],
                "LoadBalancerArn":{"Ref":"ApplicationLoadBalancer"},
                "Port":443,
                "Protocol":"HTTPS",
                "Certificates": [{
                    "CertificateArn":{"Ref":"SSLCertificate"}
            }]
            }
        },
	 "ALBListener2":{
            "Type":"AWS::ElasticLoadBalancingV2::Listener",
            "DependsOn":["ALBTargetGroup","ApplicationLoadBalancer"],
            "Properties":{
                "DefaultActions":[{
                    "Type" : "redirect",
                    "RedirectConfig":{
                        "Port" : "443",
                        "Protocol" : "HTTPS",
                        "StatusCode" : "HTTP_301"
                    }
                }],
                "LoadBalancerArn" : { "Ref" : "ApplicationLoadBalancer" },
                "Port" : "80",
                "Protocol" : "HTTP"
            }
        },
        "myDNSRecord":{
            "Type":"AWS::Route53::RecordSet",
            "Properties":{
                "AliasTarget":{
                    "DNSName":{
                        "Fn::GetAtt":[
                            "ApplicationLoadBalancer",
                            "DNSName"
                    ]},
                    "HostedZoneId":{
                        "Fn::GetAtt":[
                            "ApplicationLoadBalancer",
                            "CanonicalHostedZoneID"
                    ]}
                },
                "HostedZoneName":{"Fn::Join":["",[{ "Ref":"Domain"},"."]]} ,
                "Name":{"Fn::Join":["",[{ "Ref":"Domain"},"."]]},
                "Type": "A"
            },
            "DependsOn":"ApplicationLoadBalancer"
},
        "AutoScalingGroup":{
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties":{
                "AutoScalingGroupName":"AutoScalingGroup",
                "Cooldown":"60",
                "DesiredCapacity":"3",
                "LaunchConfigurationName":{"Ref":"MyLaunchConfig"},
                "VPCZoneIdentifier":[{"Ref" : "SubnetId2"}, {"Ref" : "SubnetId3"}],
                "MaxSize":"10",
                "MinSize":"3",
                "TargetGroupARNs":[{"Ref":"ALBTargetGroup"}],
                "Tags" :[{
                    "Key":{"Ref":"TagKey"},
                    "Value":{"Ref":"TagValue"},
                    "PropagateAtLaunch": true
                }]
            },
            "DependsOn" : ["ALBListener","ALBListener2","ALBTargetGroup","MyLaunchConfig"]
        },
        "WebServerScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
              "AdjustmentType": "ChangeInCapacity",
              "AutoScalingGroupName": {
                "Ref": "AutoScalingGroup"
              },
              "Cooldown": "60",
              "ScalingAdjustment": "1"
            }
          },
        "WebServerScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
              "AdjustmentType": "ChangeInCapacity",
              "AutoScalingGroupName": {
                "Ref": "AutoScalingGroup"
              },
              "Cooldown": "60",
              "ScalingAdjustment": "-1"
            }
          },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
              "AlarmDescription": "Scale-up if CPU usage is above 10%",
              "MetricName": "CPUUtilization",
              "Namespace": "AWS/EC2",
              "Statistic": "Average",
              "Period": "120",
              "EvaluationPeriods": "3",
              "Threshold": "10",
              "AlarmActions": [
                {
                  "Ref": "WebServerScaleUpPolicy"
                }
              ],
              "Dimensions": [
                {
                  "Name": "AutoScalingGroupName",
                  "Value": {
                    "Ref": "AutoScalingGroup"
                  }
                }
              ],
              "ComparisonOperator": "GreaterThanThreshold"
            }
          },
        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
              "AlarmDescription": "Scale-down if CPU usage is below 5%",
              "MetricName": "CPUUtilization",
              "Namespace": "AWS/EC2",
              "Statistic": "Average",
              "Period": "120",
              "EvaluationPeriods": "3",
              "Threshold": "5",
              "AlarmActions": [
                {
                  "Ref": "WebServerScaleDownPolicy"
                }
              ],
              "Dimensions": [
                {
                  "Name": "AutoScalingGroupName",
                  "Value": {
                    "Ref": "AutoScalingGroup"
                  }
                }
              ],
              "ComparisonOperator": "LessThanThreshold"
            }
          }
        ,
        "AWSdynamotable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    }
                ],
                "TableName": "csye6225",
                "KeySchema": [
                    {
                        "AttributeName": "id",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                },
                "TimeToLiveSpecification":{
                    "AttributeName":"TTL",
                    "Enabled": true
                }
            }
        },
        "DBSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Creating Security group with ingress rules for webapp",
                "GroupName": "csye6225-rds",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "3306",
                        "ToPort": "3306",
                        "SourceSecurityGroupId": {
                            "Ref": "WebServerSecurityGroup"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "csye6225-rds"
                    }
                ]
            }
        },
        "dbSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "RDS Subnet Group",
                "DBSubnetGroupName": "rds",
                "SubnetIds": [
                    {
                        "Ref": "SubnetId2"
                    },
                    {
                        "Ref": "SubnetId3"
                    }
                ]
            }
        },
        "MyRDSDB": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "AllocatedStorage": "10",
                "MultiAZ": "False",
                "DBInstanceIdentifier": "csye6225",
                "DBInstanceClass": "db.t2.micro",
                "MasterUsername": "csye6225master",
                "MasterUserPassword": "csye6225password",
                "Engine": "MySQL",
                "DBName": "csye6225",
                "DBSubnetGroupName": {
                    "Ref": "dbSubnetGroup"
                },
                "PubliclyAccessible": true,
                "VPCSecurityGroups": [
                    {
                        "Ref": "DBSecurityGroup"
                    }
                ]
            }
        },
        "CodeDeployApplication": {
            "Type": "AWS::CodeDeploy::Application",
            "Properties": {
                "ApplicationName": "csye6225-webapp",
                "ComputePlatform": "Server"
            }
        },
        "CodeDeployApplicationGroup": {
            "Type": "AWS::CodeDeploy::DeploymentGroup",
            "Properties": {
                "ApplicationName": {
                    "Ref": "CodeDeployApplication"
                },
                "AutoRollbackConfiguration": {
                    "Events": [
                        "DEPLOYMENT_FAILURE"
                    ]
                },
                "AutoScalingGroups" : [ {"Ref":"AutoScalingGroup"}],
                "LoadBalancerInfo":{
                    "TargetGroupInfoList":[{"Name":{"Fn::GetAtt":["ALBTargetGroup","TargetGroupName"]}}]
                },
                "DeploymentConfigName": "CodeDeployDefault.AllAtOnce",
                "DeploymentGroupName": "csye6225-webapp-deployment",
                "DeploymentStyle": {
                    "DeploymentType": "IN_PLACE",
                    "DeploymentOption": "WITHOUT_TRAFFIC_CONTROL"
                },
                "Ec2TagFilters": [
                    {
                        "Key": {
                            "Ref": "TagKey"
                        },
                        "Value": {
                            "Ref": "TagValue"
                        },
                        "Type": "KEY_AND_VALUE"
                    }
                ],
                "ServiceRoleArn": {
                    "Ref": "RoleArn"
                }
            },
            "DependsOn": [
                "CodeDeployApplication",
                "MyLaunchConfig",
                "ALBTargetGroup",
                "AutoScalingGroup"
            ]
        },

       
  

    "sizeRestrict": {
        "Type": "AWS::WAFRegional::SizeConstraintSet",
        "Properties": {
           "Name": "sizeRestrict",
           "SizeConstraints": [
              {
                 "FieldToMatch": {
                    "Type": "URI"
                 },
                 "TextTransformation": "NONE",
                 "ComparisonOperator": "GT",
                 "Size": "512"
              },
              {
                 "FieldToMatch": {
                    "Type": "QUERY_STRING"
                 },
                 "TextTransformation": "NONE",
                 "ComparisonOperator": "GT",
                 "Size": "1024"
              },
              {
                 "FieldToMatch": {
                    "Type": "BODY"
                 },
                 "TextTransformation": "NONE",
                 "ComparisonOperator": "GT",
                 "Size": "10000000"
              },
              {
                 "FieldToMatch": {
                    "Type": "HEADER",
                    "Data": "cookie"
                 },
                 "TextTransformation": "NONE",
                 "ComparisonOperator": "GT",
                 "Size": "4096"
              }
           ]
        }
    },
    
    
    
    "reqSizeRule": {    
        "Type": "AWS::WAFRegional::Rule",
        "DependsOn" : ["sizeRestrict"],
        
        "Properties": {
           "MetricName": "reqSizeRule",
           "Name": "reqSizeRule",
           "Predicates": [
              {
                 "Type": "SizeConstraint",
                 "Negated": false,
                 "DataId": {"Ref" : "sizeRestrict"}
              }
           ]
        }
    },
    "MyIPSetWhiteList": {
        "Type": "AWS::WAFRegional::IPSet",
        "Properties": {
          "Name": "WhiteList IP Address Set",
          "IPSetDescriptors": [
            {
              "Type": "IPV4",
              "Value": "155.33.135.11/32"
            },
            {
              "Type": "IPV4",
              "Value": "192.0.7.0/24"
            }
          ]
        }
      },
      "MyIPSetWhiteListRule": {
        "Type": "AWS::WAFRegional::Rule",
        "Properties": {
          "Name": "WhiteList IP Address Rule",
          "MetricName": "MyIPSetWhiteListRule",
          "Predicates": [
            {
              "DataId": {
                "Ref": "MyIPSetWhiteList"
              },
              "Negated": false,
              "Type": "IPMatch"
            }
          ]
        }
    },

        "myIPSetBlacklist": {
            "Type": "AWS::WAFRegional::IPSet",
            "Properties": {
                "Name": "myIPSetBlacklist",
                "IPSetDescriptors": [
                {
                    "Type" : "IPV4",
                    "Value" : {"Ref":"IPtoBlock1"}
                },
                {
                    "Type" : "IPV4",
                    "Value" : {"Ref":"IPtoBlock2"}
                }
                ]
            }      
    },

    "BlackListIPSetRule" : {
        
        "Type": "AWS::WAFRegional::Rule",
        
        "DependsOn" : ["myIPSetBlacklist"],
        
        "Properties": {
            "Name": "BlackListIPSetRule",
            "MetricName" : "BlackListIPSetRule",
            "Predicates": [
            {
                "DataId" : {"Ref":"myIPSetBlacklist"},
                "Negated" : false,
                "Type" : "IPMatch"
            }
            ]
        }      
},

"WAFAutoBlockSet": {
    "Type": "AWS::WAFRegional::IPSet",
    "Properties": {
      "Name": "Auto Block Set"
    }
  },
  "MyAutoBlockRule": {
    "Type": "AWS::WAFRegional::Rule",
    "DependsOn": "WAFAutoBlockSet",
    "Properties": {
      "Name": "Auto Block Rule",
      "MetricName": "AutoBlockRule",
      "Predicates": [
        {
          "DataId": {
            "Ref": "WAFAutoBlockSet"
          },
          "Negated": false,
          "Type": "IPMatch"
        }
      ]
    }
},

"wafrSQLiSet": {
    "Type": "AWS::WAFRegional::SqlInjectionMatchSet",
    "Properties" : {
      "Name": "wafrSQLiSet",
      "SqlInjectionMatchTuples": [
         {
            "FieldToMatch": {
               "Type": "URI"
            },
            "TextTransformation": "URL_DECODE"
         },
         {
            "FieldToMatch": {
               "Type": "URI"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
         },
         {
            "FieldToMatch": {
               "Type": "QUERY_STRING"
            },
            "TextTransformation": "URL_DECODE"
         },
         {
            "FieldToMatch": {
               "Type": "QUERY_STRING"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
         },
         {
            "FieldToMatch": {
               "Type": "BODY"
            },
            "TextTransformation": "URL_DECODE"
         },
         {
            "FieldToMatch": {
               "Type": "BODY"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
         },
         {
            "FieldToMatch": {
               "Type": "HEADER",
               "Data": "cookie"
            },
            "TextTransformation": "URL_DECODE"
         },
         {
            "FieldToMatch": {
               "Type": "HEADER",
               "Data": "cookie"
            },
            "TextTransformation": "HTML_ENTITY_DECODE"
         }
      ]
    }

},
     
"wafrSQLiRule": {
    "Type": "AWS::WAFRegional::Rule",
    "DependsOn" : ["wafrSQLiSet"],
    
    "Properties": {
       "MetricName": "wafrSQLiRule",
       "Name": "wafr-SQLiRule",
       "Predicates": [
          {
             "Type": "SqlInjectionMatch",
             "Negated": false,
             "DataId": {"Ref" : "wafrSQLiSet"}
          }
       ]
    }
 },  
 "BadReferers": {
    "Type": "AWS::WAFRegional::ByteMatchSet",
    "Properties": {
      "Name": "Bad Referers",
      "ByteMatchTuples": [
        {
          "FieldToMatch": {
            "Type": "HEADER",
            "Data": "cookie"
          },
          "TargetString": "badrefer1",
          "TextTransformation": "URL_DECODE",
          "PositionalConstraint": "CONTAINS"
        },
        {
          "FieldToMatch": {
            "Type": "HEADER",
            "Data": "authorization"
          },
          "TargetString": "QGdtYWlsLmNvbQ==",
          "TextTransformation": "URL_DECODE",
          "PositionalConstraint": "CONTAINS"
        }
      ]
    }
  },
  "BadReferersRule": {
    "Type": "AWS::WAFRegional::Rule",
    "Properties": {
      "Name": "BadReferersRule",
      "MetricName": "BadReferersRule",
      "Predicates": [
        {
          "DataId": {
            "Ref": "BadReferers"
          },
          "Negated": false,
          "Type": "ByteMatch"
        }
      ]
    }
},    
 "PathStringSetReferers": {
    "Type": "AWS::WAFRegional::ByteMatchSet",
    "Properties": {
      "Name": "Path String Referers Set",
      "ByteMatchTuples": [
        {
          "FieldToMatch": {
            "Type": "URI"
          },
          "TargetString": "../",
          "TextTransformation": "URL_DECODE",
          "PositionalConstraint": "CONTAINS"
        },
        {
          "FieldToMatch": {
            "Type": "URI"
          },
          "TargetString": "../",
          "TextTransformation": "HTML_ENTITY_DECODE",
          "PositionalConstraint": "CONTAINS"
        },
        {
          "FieldToMatch": {
            "Type": "QUERY_STRING"
          },
          "TargetString": "../",
          "TextTransformation": "URL_DECODE",
          "PositionalConstraint": "CONTAINS"
        },
        {
          "FieldToMatch": {
            "Type": "QUERY_STRING"
          },
          "TargetString": "../",
          "TextTransformation": "HTML_ENTITY_DECODE",
          "PositionalConstraint": "CONTAINS"
        },
        {
          "FieldToMatch": {
            "Type": "URI"
          },
          "TargetString": "://",
          "TextTransformation": "URL_DECODE",
          "PositionalConstraint": "CONTAINS"
        },
        {
          "FieldToMatch": {
            "Type": "URI"
          },
          "TargetString": "://",
          "TextTransformation": "HTML_ENTITY_DECODE",
          "PositionalConstraint": "CONTAINS"
        },
        {
          "FieldToMatch": {
            "Type": "QUERY_STRING"
          },
          "TargetString": "://",
          "TextTransformation": "URL_DECODE",
          "PositionalConstraint": "CONTAINS"
        },
        {
          "FieldToMatch": {
            "Type": "QUERY_STRING"
          },
          "TargetString": "://",
          "TextTransformation": "HTML_ENTITY_DECODE",
          "PositionalConstraint": "CONTAINS"
        }
      ]
    }
  },
  "PathStringSetReferersRule": {
    "Type": "AWS::WAFRegional::Rule",
    "Properties": {
      "Name": "PathStringSetReferersRule",
      "MetricName": "PathStringSetReferersRule",
      "Predicates": [
        {
          "DataId": {
            "Ref": "PathStringSetReferers"
          },
          "Negated": false,
          "Type": "ByteMatch"
        }
      ]
    }
},

"ServerSideIncludesSet": {
    "Type": "AWS::WAFRegional::ByteMatchSet",
    "Properties": {
      "Name": "Server Side Includes Set",
      "ByteMatchTuples": [
        {
          "FieldToMatch": {
            "Type": "URI"
          },
          "TargetString": "/includes",
          "TextTransformation": "URL_DECODE",
          "PositionalConstraint": "STARTS_WITH"
        },
        {
          "FieldToMatch": {
            "Type": "URI"
          },
          "TargetString": ".cfg",
          "TextTransformation": "LOWERCASE",
          "PositionalConstraint": "ENDS_WITH"
        },
        {
          "FieldToMatch": {
            "Type": "URI"
          },
          "TargetString": ".conf",
          "TextTransformation": "LOWERCASE",
          "PositionalConstraint": "ENDS_WITH"
        },
        {
          "FieldToMatch": {
            "Type": "URI"
          },
          "TargetString": ".config",
          "TextTransformation": "LOWERCASE",
          "PositionalConstraint": "ENDS_WITH"
        },
        {
          "FieldToMatch": {
            "Type": "URI"
          },
          "TargetString": ".ini",
          "TextTransformation": "LOWERCASE",
          "PositionalConstraint": "ENDS_WITH"
        },
        {
          "FieldToMatch": {
            "Type": "URI"
          },
          "TargetString": ".log",
          "TextTransformation": "LOWERCASE",
          "PositionalConstraint": "ENDS_WITH"
        },
        {
          "FieldToMatch": {
            "Type": "URI"
          },
          "TargetString": ".bak",
          "TextTransformation": "LOWERCASE",
          "PositionalConstraint": "ENDS_WITH"
        },
        {
          "FieldToMatch": {
            "Type": "URI"
          },
          "TargetString": ".bakup",
          "TextTransformation": "LOWERCASE",
          "PositionalConstraint": "ENDS_WITH"
        },
        {
          "FieldToMatch": {
            "Type": "URI"
          },
          "TargetString": ".txt",
          "TextTransformation": "LOWERCASE",
          "PositionalConstraint": "ENDS_WITH"
        }
      ]
    }
  },
  "ServerSideIncludesRule": {
    "Type": "AWS::WAFRegional::Rule",
    "Properties": {
      "Name": "ServerSideIncludesRule",
      "MetricName": "ServerSideIncludesRule",
      "Predicates": [
        {
          "DataId": {
            "Ref": "ServerSideIncludesSet"
          },
          "Negated": false,
          "Type": "ByteMatch"
        }
      ]
    }
},

"DetectXSS": {
    "Type": "AWS::WAFRegional::XssMatchSet",
    "Properties": {
      "Name": "XssMatchSet",
      "XssMatchTuples": [
        {
          "FieldToMatch": {
            "Type": "URI"
          },
          "TextTransformation": "URL_DECODE"
        },
        {
          "FieldToMatch": {
            "Type": "URI"
          },
          "TextTransformation": "HTML_ENTITY_DECODE"
        },
        {
          "FieldToMatch": {
            "Type": "QUERY_STRING"
          },
          "TextTransformation": "URL_DECODE"
        },
        {
          "FieldToMatch": {
            "Type": "QUERY_STRING"
          },
          "TextTransformation": "HTML_ENTITY_DECODE"
        }
      ]
    }
  },
  "XSSRule": {
    "Type": "AWS::WAFRegional::Rule",
    "Properties": {
      "Name": "XSSRule",
      "MetricName": "XSSRule",
      "Predicates": [
        {
          "DataId": {
            "Ref": "DetectXSS"
          },
          "Negated": false,
          "Type": "XssMatch"
        }
      ]
    }
},
 "MyScanProbesSet": {
    "Type": "AWS::WAFRegional::IPSet",
    "Properties": {
      "Name": "MyScanProbesSet"
    }
  },
  "MyScansProbesRule": {
    "Type": "AWS::WAFRegional::Rule",
    "DependsOn": "MyScanProbesSet",
    "Properties": {
      "Name": "MyScansProbesRule",
      "MetricName": "SecurityAutomationsScansProbesRule",
      "Predicates": [
        {
          "DataId": {
            "Ref": "MyScanProbesSet"
          },
          "Negated": false,
          "Type": "IPMatch"
        }
      ]
    }
},

"MyWebACL": {
    "Type": "AWS::WAFRegional::WebACL",      
    "Properties": {
        "Name": "MyWebACL",
        "DefaultAction": {
            "Type": "ALLOW"
        },
        "MetricName" : "MyWebACL",
        "Rules": [
        {
            "Action" : {
                "Type" : "BLOCK"
            },
            "Priority" : 2,
            "RuleId" : { "Ref" : "MyIPSetWhiteListRule" }
        },
        
        {
            "Action" : {
                "Type" : "BLOCK"
            },
            "Priority" : 1,
            "RuleId" : { "Ref" : "reqSizeRule" }
        },
        
        {
            "Action" : {
                "Type" : "BLOCK"
            },
            "Priority" : 3,
            "RuleId" : { "Ref" : "BlackListIPSetRule" }
        },
        {
            "Action" : {
                "Type" : "BLOCK"
            },
            "Priority" : 4,
            "RuleId" : { "Ref" : "MyAutoBlockRule" }
        },
        {
            "Action" : {
                "Type" : "BLOCK"
            },
            "Priority" : 5,
            "RuleId" : { "Ref" : "wafrSQLiRule" }
        },
        {
            "Action" : {
                "Type" : "BLOCK"
            },
            "Priority" : 6,
            "RuleId" : { "Ref" : "BadReferersRule" }
        },
        {
            "Action" : {
                "Type" : "BLOCK"
            },
            "Priority" : 7,
            "RuleId" : { "Ref" : "PathStringSetReferersRule" }
        },
       
        {
            "Action" : {
                "Type" : "BLOCK"
            },
            "Priority" : 8,
            "RuleId" : { "Ref" : "ServerSideIncludesRule" }
        },
        {
            "Action" : {
                "Type" : "BLOCK"
            },
            "Priority" : 9,
            "RuleId" : { "Ref" : "XSSRule" }
        },
        {
            "Action" : {
                "Type" : "BLOCK"
            },
            "Priority" : 10,
            "RuleId" : { "Ref" : "MyScansProbesRule" }
        }
                       
        
        ]
    }      
},


        "CodeDeployEC2S3": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "Description": "This policy allows EC2 instances to get data from S3 buckets. This is required for EC2 instances to download latest application revision.",
                "Path": "/",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:PutObject",
                                "s3:DeleteObject",
                                "s3:GetObject",
                                "s3:PutObjectAcl"
                            ],
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3Bucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:Get*",
                                "s3:List*"
                            ],
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3CodeBucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "CodeDeployEC2ServiceRole"
                    }
                ],
                "ManagedPolicyName": "CodeDeployEC2S3"
            },
            "DependsOn": "CodeDeployEC2ServiceRole"
        },
        "SNSPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "Description": "This policy allows EC2 to access SNS",
                "Path": "/",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "SNS:*"
                            ],
                            "Resource": [
                                "*"
                            ]
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "CodeDeployEC2ServiceRole"
                    }
                ],
                "ManagedPolicyName": "SNSPolicy"
            },
            "DependsOn": "CodeDeployEC2ServiceRole"
        },
        "CodeDeployEC2ServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "CodeDeployEC2ServiceRole",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy",
                    "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
                ]
            }
        },
        "EC2ServiceRoleInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    "CodeDeployEC2ServiceRole"
                ],
                "InstanceProfileName": "EC2ServiceRoleInstanceProfile"
            },
            "DependsOn": "CodeDeployEC2ServiceRole"
        },
        "MyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": "MyLambdaFunction",
                "Handler": "Email::handleRequest",
                "Code": {
                    "S3Bucket": {
                        "Ref": "S3CodeBucket"
                    },
                    "S3Key": "lambda-1.0-SNAPSHOT.zip"
                },
                "Role": {
                    "Fn::ImportValue": "LambdaExecutionRoleARN"
                },
                "Description": "lambda to host webapp",
                "Environment": {
                    "Variables": {"DOMAIN_NAME":{"Fn::Join":["",["https://www.",{"Ref": "Domain" }]]}, "FROM_EMAIL":{"Fn::Join":["",["no-reply@test.",{"Ref": "Domain" }]]}, "TABLENAME":"csye6225", "TTL":"20"} 
                },
                "Runtime": "java8",
                "Timeout": 100,
                "MemorySize": 256
            }
        },
        "MySNS": {
            "Type": "AWS::SNS::Topic",
            "DependsOn": "MyLambdaFunction",
            "Properties": {
                "TopicName": { 
			"Ref": "mySNSTopicName" 
		},
                "Subscription": [
                    {
                        "Endpoint": {
                            "Fn::GetAtt": [
                                "MyLambdaFunction",
                                "Arn"
                            ]
                        },
                        "Protocol": "lambda"
                    }
                ],
                "DisplayName": "MySNS"
            }
        },
        "LambdaResourcePolicy": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": {
                    "Fn::GetAtt": [
                        "MyLambdaFunction",
                        "Arn"
                    ]
                },
                "Principal": "sns.amazonaws.com",
                "Action": "lambda:InvokeFunction",
                "SourceArn": {
                    	"Ref": "MySNS"
                    
                }
            }
        }
    }
}